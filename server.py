#!/usr/bin/env python3

# import RPi.GPIO as GPIO
import RPi.GPIO as GPIO
import os
from http.server import BaseHTTPRequestHandler, HTTPServer
import socketserver
from urllib.parse import urlparse
from urllib.parse import parse_qs
import re
from urllib.parse import urlparse, parse_qs
import logging
from robot import *

loglevel = logging.DEBUG
logfile  = 'log_python.txt'


class MyServer(BaseHTTPRequestHandler):
    base = "templates/"
    logging.basicConfig(filename=base+logfile, format='%(asctime)s %(message)s', datefmt='%Y/%m/%d %H:%M:%S', level=loglevel)

    robot = [Hand('/dev/ttyAMA5', 115200, 15, 27, 22),
             Hand('/dev/ttyAMA3', 115200, 17, 23, 19),
             Hand('/dev/ttyAMA4', 115200, 19, 20, 16)]
    
    # flags
    send_flags = [False, False, False]
    get_flags = [False, False, False]
    stop_flag = False
    setZero_flag = False
    flash_flag = False
    

    def hand_thread(self, i):
        while True:
            if send_flags[i]:
                self.robot[i].start()
            if get_flags[i]:
                self.robot[i].get()
            if stop_flag:
                pass
            if setZero_flag:
                pass
            if flash_flag:
                pass

    def do_HEAD(self):
        self.send_response(200)
        self.send_header('Content-type', 'text/html')
        self.end_headers()

    def _redirect(self, path):
        self.send_response(303)
        self.send_header('Content-type', 'text/html')
        self.send_header('Location', path)
        self.end_headers()

    def do_GET(self):
        path = urlparse(self.path).path
        query = urlparse(self.path).query
        range = self.headers.get('Range')
        from_byte = 0
        to_byte = 0

        if path != '/'+logfile:
            print(urlparse(self.path))
            if query:
                logging.info("Path: "+str(urlparse(self.path)))


        if re.search(r'^\/\S+\.(css|html|jpg|txt|py|ico|js)$', path):
            if not os.path.exists(self.base + path):
                self.send_response(404)
                self.send_header("Content-type", "text/html")
                self.end_headers()
                self.wfile.write(bytes("No such file", "utf8"))
                return

            # serving local file
            file_size = os.path.getsize(self.base + path)

            if (range is None):
                self.send_response(200)

            else:
#           range may be: bytes=-30000   last 30k to end
#	                  bytes=100-     from 100 to end
                m = re.search(r'^(bytes=)?-(\d+)$', range)
                if m:  from_byte = file_size - int(m.group(2))
                m = re.search(r'^(bytes=)?(\d+)-$', range)
                if m:  from_byte = int(m.group(2))
                    
                if from_byte < 0: from_byte = 0
                if from_byte > file_size: # requested incorrect range, exiting
                    self.send_response(416)
                    self.end_headers()
                    return
                self.send_response(206)

            if re.search(r'\.(css)$', path):
                self.send_header("Content-Type", "text/css")
            elif re.search(r'\.(html)$', path):
                self.send_header("Content-Type", "text/html")
            elif re.search(r'\.(js)$', path):
                self.send_header("Content-Type", "application/javascript")
            elif re.search(r'\.(txt)', path):
                self.send_header("Content-Type", "text/html")

            self.send_header("Content-Length", str(file_size-from_byte)) # actual transmit length

            if range is not None:
                self.send_header("Content-Range", "bytes " + str(from_byte) + "-" + str(file_size-1) + "/" + str(file_size))

            self.end_headers()

            with open(self.base + path) as file:
                if from_byte>0:
                    file.seek(from_byte) # or (-lastbytes, os.SEEK_END)
                data = file.read()  # .replace('\n','<br>')
                self.wfile.write(bytes(data, "utf8"))

            return





        # Sending an '200 OK' response
        self.send_response(200)

        # Setting the header
        self.send_header("Content-type", "text/html")

        # Whenever using 'send_header', you also have to call 'end_headers'
        self.end_headers()

        # Extract query param
        name = 'World'
        query_components = parse_qs(urlparse(self.path).query)
        print(query_components)
        if 'name' in query_components:
            name = query_components["name"][0]

        # Some custom HTML code, possibly generated by another function
        with open('templates/index.html', 'r') as file:
            html = file.read()
        # html = f"<html><head></head><body><h1>Hello {name}!</h1></body></html>"

        # Writing the HTML contents with UTF-8
        self.wfile.write(bytes(html, "utf8"))

        return

    def do_POST(self):

        content_length = int(self.headers['Content-Length'])
        post_data = self.rfile.read(content_length).decode("utf-8")
        args = parse_qs(post_data)
        print(args)

        if "set1" in args:
            lin = 0
            ang = 0.0
            hold = 0
            if "lin1" in args:
                lin = float(args["lin1"][0])
            if "ang1" in args:
                ang = float(args["ang1"][0])
            if "hold1" in args:
                hold = int(args["hold1"][0])
            self.robot[0].params = Params(lin, ang, hold)
            print(str(self.robot[0].params.lin) + " " + str(self.robot[0].params.ang) + " " + str(self.robot[0].params.hold))

        if "set2" in args:
            lin = 0
            ang = 0.0
            hold = 0
            if "lin2" in args:
                lin = float(args["lin2"][0])
            if "ang2" in args:
                ang = float(args["ang2"][0])
            if "hold2" in args:
                hold = int(args["hold2"][0])
            self.robot[1].params = Params(lin, ang, hold)
            print(str(self.robot[1].params.lin) + " " + str(self.robot[1].params.ang) + " " + str(self.robot[1].params.hold))

        if "set3" in args:
            lin = 0
            ang = 0.0
            hold = 0
            if "lin3" in args:
                lin = float(args["lin3"][0])
            if "ang3" in args:
                ang = float(args["ang3"][0])
            if "hold3" in args:
                hold = int(args["hold3"][0])
            self.robot[2].params = Params(lin, ang, hold)
            print(str(self.robot[2].params.lin) + " " + str(self.robot[2].params.ang) + " " + str(self.robot[2].params.hold))

        if "get1" in args:
            get_flags[0] = True
            self.robot[0].get()
        if "get2" in args:
            get_flags[1] = True
            self.robot[1].get()
        if "get3" in args:
            get_flags[2] = True
            self.robot[2].get()

        if "send1" in args:
            send_flags[0] = True
            self.robot[0].start()
        if "send2" in args:
            send_flags[1] = True
            self.robot[1].start()
        if "send3" in args:
            send_flags[2] = True
            self.robot[2].start()

        if "send_cmd" in args:
            if "cmd" in args:
                if args["cmd"][0] == "1R":
                    print("1R")
                    f = open("arr2.txt", "r")
                    file_arr = f.read()

                    a0_start = file_arr.find("angle0")+10
                    a0_end = file_arr.find("}", a0_start)
                    angle0_str = file_arr[a0_start:a0_end].split(",")

                    s0_start = file_arr.find("shift0") + 10
                    s0_end = file_arr.find("}", s0_start)
                    shift0_str = file_arr[s0_start:s0_end].split(",")

                    a1_start = file_arr.find("angle1") + 10
                    a1_end = file_arr.find("}", a1_start)
                    angle1_str = file_arr[a1_start:a1_end].split(",")

                    s1_start = file_arr.find("shift1") + 10
                    s1_end = file_arr.find("}", s1_start)
                    shift1_str = file_arr[s1_start:s1_end].split(",")

                    a2_start = file_arr.find("angle2") + 10
                    a2_end = file_arr.find("}", a2_start)
                    angle2_str = file_arr[a2_start:a2_end].split(",")

                    s2_start = file_arr.find("shift2") + 10
                    s2_end = file_arr.find("}", s2_start)
                    shift2_str = file_arr[s2_start:s2_end].split(",")

                    h0_start = file_arr.find("hoock0") + 10
                    h0_end = file_arr.find("}", h0_start)
                    hoock0_str = file_arr[h0_start:h0_end].split(",")

                    h1_start = file_arr.find("hoock1") + 10
                    h1_end = file_arr.find("}", h1_start)
                    hoock1_str = file_arr[h1_start:h1_end].split(",")

                    h2_start = file_arr.find("hoock2") + 10
                    h2_end = file_arr.find("}", h2_start)
                    hoock2_str = file_arr[h2_start:h2_end].split(",")

                    arr_len = len(angle0_str)

                    angle0 = []
                    shift0 = []
                    angle1 = []
                    shift1 = []
                    angle2 = []
                    shift2 = []
                    hoock0 = []
                    hoock1 = []
                    hoock2 = []

                    for i in range(arr_len):
                        angle0.append(float(angle0_str[i]))
                        shift0.append(float(shift0_str[i]))
                        angle1.append(float(angle1_str[i]))
                        shift1.append(float(shift1_str[i]))
                        angle2.append(float(angle2_str[i]))
                        shift2.append(float(shift2_str[i]))
                        hoock0.append(int(hoock0_str[i]))
                        hoock1.append(int(hoock1_str[i]))
                        hoock2.append(int(hoock2_str[i]))
                    f.close()

                    for i in range(arr_len):
                        self.robot[0].params = Params(shift0[i], angle0[i], hoock0[i])
                        self.robot[1].params = Params(shift1[i], angle1[i], hoock1[i])
                        self.robot[2].params = Params(shift2[i], angle2[i], hoock2[i])

                        status0 = self.robot[0].start()
                        status1 = self.robot[1].start()
                        status2 = self.robot[2].start()
                        sleep(1)

                        if (status0 < 0) or (status1 < 0) or (status2 < 0):
                            logging.error(f'Error occurred on coordinates: ({shift0[i]}, {angle0[i]}), ({shift1[i]}, {angle1[i]}), ({shift2[i]}, {angle2[i]})\nAbort the move')
                            break
                
                '''if args["cmd"][0] == "test":
                    for i in range(1000):
                        if i%2 == 0:
                            self.robot[0].params = Params(20,100,1)
                            self.robot[2].params = Params(20,100,1)
                        else:
                            self.robot[0].params = Params(130,200,0)
                            self.robot[2].params = Params(130,200,0)
                        
                        status0 = self.robot[0].start()
                        status2 = self.robot[2].start()
                        
                        if (status0 < 0) or (status2 < 0):
                            logging.error(f'TEST Error occures on iteration {i}')
                            break
                        logging.error('Test finished')''' 

                if args["cmd"][0] == "hold":
                    print("hold")
                    error_flag = False
                    LS0 = self.robot[0].get()
                    if LS0[0] > 0:
                        self.robot[0].params = Params(LS0[0], LS0[1], 1)
                    else:
                        logging.error('Error occurred in getting coordinates of the hand '+str(self.robot[0].num))
                        error_flag = True

                    LS1 = self.robot[1].get()
                    if LS1[0] > 0:
                        self.robot[1].params = Params(LS1[0], LS1[1], 1)
                    else:
                        logging.error('Error occurred in getting coordinates of the hand '+str(self.robot[1].num))
                        error_flag = True

                    LS2 = self.robot[2].get()
                    if LS2[0] > 0:
                        self.robot[2].params = Params(LS2[0], LS2[1], 1)
                    else:
                        logging.error('Error occurred in getting coordinates of the hand '+str(self.robot[2].num))
                        error_flag = True

                    if not error_flag:
                        self.robot[0].start()
                        self.robot[1].start()
                        self.robot[2].start()

                if args["cmd"][0] == "unhold":
                    print("unhold")
                    error_flag = False
                    LS0 = self.robot[0].get()
                    if LS0[0] > 0:
                        self.robot[0].params = Params(LS0[0], LS0[1], 0)
                    else:
                        logging.error('Error occurred in getting coordinates of the hand '+str(self.robot[0].num))
                        error_flag = True

                    LS1 = self.robot[1].get()
                    if LS1[0] > 0:
                        self.robot[1].params = Params(LS1[0], LS1[1], 0)
                    else:
                        logging.error('Error occurred in getting coordinates of the hand '+str(self.robot[1].num))
                        error_flag = True

                    LS2 = self.robot[2].get()
                    if LS2[0] > 0:
                        self.robot[2].params = Params(LS2[0], LS2[1], 0)
                    else:
                        logging.error('Error occurred in getting coordinates of the hand '+str(self.robot[2].num))
                        error_flag = True

                    if not error_flag:
                        self.robot[0].start()
                        self.robot[1].start()
                        self.robot[2].start()

        if "stop_cmd" in args:
            self.robot[0].stop()
            self.robot[1].stop()
            self.robot[2].stop()

        if "zero_pos" in args:
            self.robot[0].setZeroPos()
            self.robot[1].setZeroPos()
            self.robot[2].setZeroPos()

        if "flash" in args:
            #status0 = self.robot[0].stop()
            #status1 = self.robot[1].stop()
            #status2 = self.robot[2].stop()
            
            #if (status0<0) or (status1 < 0) or (status2 < 0):
            #    logging.error("Error occured while stopping hands, abort the rebooting")

            self.robot[0].flash("https://github.com/AnastasiyaYatsenko/robot_bin/blob/main/hand_0.bin?raw=true") #тестова прошивка блимання світлодіодом
            #sleep(1)
            #self.robot[1].flash("https://github.com/AnastasiyaYatsenko/robot_bin/blob/main/hand_1.bin?raw=true")
            #sleep(1)
            #self.robot[2].flash("https://github.com/AnastasiyaYatsenko/robot_bin/blob/main/hand_2.bin?raw=true")

        self._redirect('/')  # Redirect back to the root url
