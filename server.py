#!/usr/bin/env python3

# import RPi.GPIO as GPIO
import OPi.GPIO as GPIO
import os
from http.server import BaseHTTPRequestHandler, HTTPServer
import socketserver
from urllib.parse import urlparse
from urllib.parse import parse_qs
import re
from urllib.parse import urlparse, parse_qs
from robot import *

class MyServer(BaseHTTPRequestHandler):
    base = "templates/"
    robot = [Hand('/dev/ttyS3', 115200),
             Hand('/dev/ttyS3', 115200),
             Hand('/dev/ttyS3', 115200)]

    # def set_Robot(self, r):
    #     self.robot = r

    def do_HEAD(self):
        self.send_response(200)
        self.send_header('Content-type', 'text/html')
        self.end_headers()

    def _redirect(self, path):
        self.send_response(303)
        self.send_header('Content-type', 'text/html')
        self.send_header('Location', path)
        self.end_headers()

    def do_GET(self):
        path = urlparse(self.path).path
        query = urlparse(self.path).query

        print(urlparse(self.path))

        if re.search(r'^\/\S+\.(css|html|jpg|txt|py|ico|js)$', path):
            if not os.path.exists(self.base + path):
                self.send_response(404)
                self.send_header("Content-type", "text/html")
                self.end_headers()
                self.wfile.write(bytes("No such file", "utf8"))
                return
            else:
                self.send_response(200)

                if re.search(r'\.(css)$', path):
                    self.send_header("Content-type", "text/css")
                elif re.search(r'\.(html)$', path):
                    self.send_header("Content-type", "text/html")
                elif re.search(r'\.(js)$', path):
                    self.send_header("Content-type", "application/javascript")
                self.end_headers()

                if re.search(r'\.(txt|py)$', path):
                    self.wfile.write(bytes("<pre>", "utf8"))

                with open(self.base + path) as file:
                    data = file.read()  # .replace('\n','<br>')
                    self.wfile.write(bytes(data, "utf8"))

                if re.search(r'\.(txt|py)$', path):
                    self.wfile.write(bytes("</pre>", "utf8"))
                return

        # Sending an '200 OK' response
        self.send_response(200)

        # Setting the header
        self.send_header("Content-type", "text/html")

        # Whenever using 'send_header', you also have to call 'end_headers'
        self.end_headers()

        # Extract query param
        name = 'World'
        query_components = parse_qs(urlparse(self.path).query)
        print(query_components)
        if 'name' in query_components:
            name = query_components["name"][0]

        # Some custom HTML code, possibly generated by another function
        with open('templates/index.html', 'r') as file:
            html = file.read()
        # html = f"<html><head></head><body><h1>Hello {name}!</h1></body></html>"

        # Writing the HTML contents with UTF-8
        self.wfile.write(bytes(html, "utf8"))

        return

    def do_POST(self):

        content_length = int(self.headers['Content-Length'])
        post_data = self.rfile.read(content_length).decode("utf-8")
        args = parse_qs(post_data)
        print(args)

        if "set1" in args:
            lin = 0
            ang = 0.0
            hold = 0
            if "lin1" in args:
                lin = float(args["lin1"][0])
            if "ang1" in args:
                ang = float(args["ang1"][0])
            if "hold1" in args:
                hold = int(args["hold1"][0])
            self.robot[0].params = Params(lin, ang, hold)
            print(str(self.robot[0].params.lin) + " " + str(self.robot[0].params.ang) + " " + str(self.robot[0].params.hold))

        if "set2" in args:
            lin = 0
            ang = 0.0
            hold = 0
            if "lin2" in args:
                lin = float(args["lin2"][0])
            if "ang2" in args:
                ang = float(args["ang2"][0])
            if "hold2" in args:
                hold = int(args["hold2"][0])
            self.robot[1].params = Params(lin, ang, hold)
            print(str(self.robot[1].params.lin) + " " + str(self.robot[1].params.ang) + " " + str(self.robot[1].params.hold))

        if "set3" in args:
            lin = 0
            ang = 0.0
            hold = 0
            if "lin3" in args:
                lin = float(args["lin3"][0])
            if "ang3" in args:
                ang = float(args["ang3"][0])
            if "hold3" in args:
                hold = int(args["hold3"][0])
            self.robot[2].params = Params(lin, ang, hold)
            print(str(self.robot[2].params.lin) + " " + str(self.robot[2].params.ang) + " " + str(self.robot[2].params.hold))

        if "get1" in args:
            self.robot[0].get()
        if "get2" in args:
            self.robot[1].get()
        if "get3" in args:
            self.robot[2].get()

        if "send1" in args:
            self.robot[0].start()
        if "send2" in args:
            self.robot[1].start()
        if "send3" in args:
            self.robot[2].start()

        if "send_cmd" in args:
            if "cmd" in args:
                pass

        if "stop_cmd" in args:
            self.robot[0].stop()
            self.robot[1].stop()
            self.robot[2].stop()

        if "zero_pos" in args:
            self.robot[0].setPos(0.0, 0.0, 0)
            self.robot[0].setPos(0.0, 120.0, 0)
            self.robot[0].setPos(0.0, 240.0, 0)

        if "reboot" in args:
            self.robot[0].stop()
            self.robot[1].stop()
            self.robot[2].stop()

            self.robot[0].reboot()
            self.robot[1].reboot()
            self.robot[2].reboot()

        self._redirect('/')  # Redirect back to the root url
